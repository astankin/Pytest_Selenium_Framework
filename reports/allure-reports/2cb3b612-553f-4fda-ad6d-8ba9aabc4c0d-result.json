{"name": "test_register_user_with_email_without_domain", "status": "failed", "statusDetails": {"message": "AssertionError: Test Failed! Email must contains domain", "trace": "self = <test_cases.test_001_registration_ddt.TestUserRegistration object at 0x00000179FCB25890>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"122995e6f922405ae63ae5ab36c6ef00\")>\n\n    def test_register_user_with_email_without_domain(self, setup):\n        self.open_register_form(setup)\n        self.logger.info(\"Starting test with email without domain\")\n        self.register_page = AccountRegistrationPage(self.driver)\n        self.email = XLUtils.read_data(self.path, \"Registration\", 3, 1)\n        self.username = generate_random_username(5)\n        self.register_page.register(\n            self.username,\n            self.email,\n            self.password,\n            self.conf_password,\n            self.first_name,\n            self.last_name\n        )\n    \n        expected_message = f\"The Email field is not a valid e-mail address.\"\n        try:\n>           message_element = self.register_page.get_error_message()\n\ntest_cases\\test_001_registration_ddt.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages_objects\\account_registration_page.py:57: in get_error_message\n    return self.driver.find_element(By.XPATH, self.error_message_xpath)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000179FCF96FD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77417C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77417C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"/html/body/div/main/div/div/form/div[1]/ul/li\"}\nE         (Session info: chrome=107.0.5304.107); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x003FACD3+2075859]\nE       \tOrdinal0 [0x0038EE61+1633889]\nE       \tOrdinal0 [0x0028B7BD+571325]\nE       \tOrdinal0 [0x002BAC2F+764975]\nE       \tOrdinal0 [0x002BAE1B+765467]\nE       \tOrdinal0 [0x002ED0F2+970994]\nE       \tOrdinal0 [0x002D7364+881508]\nE       \tOrdinal0 [0x002EB56A+963946]\nE       \tOrdinal0 [0x002D7136+880950]\nE       \tOrdinal0 [0x002AFEFD+720637]\nE       \tOrdinal0 [0x002B0F3F+724799]\nE       \tGetHandleVerifier [0x006AEED2+2769538]\nE       \tGetHandleVerifier [0x006A0D95+2711877]\nE       \tGetHandleVerifier [0x0048A03A+521194]\nE       \tGetHandleVerifier [0x00488DA0+516432]\nE       \tOrdinal0 [0x0039682C+1665068]\nE       \tOrdinal0 [0x0039B128+1683752]\nE       \tOrdinal0 [0x0039B215+1683989]\nE       \tOrdinal0 [0x003A6484+1729668]\nE       \tBaseThreadInitThunk [0x75E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77417C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77417C3E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_001_registration_ddt.TestUserRegistration object at 0x00000179FCB25890>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"122995e6f922405ae63ae5ab36c6ef00\")>\n\n    def test_register_user_with_email_without_domain(self, setup):\n        self.open_register_form(setup)\n        self.logger.info(\"Starting test with email without domain\")\n        self.register_page = AccountRegistrationPage(self.driver)\n        self.email = XLUtils.read_data(self.path, \"Registration\", 3, 1)\n        self.username = generate_random_username(5)\n        self.register_page.register(\n            self.username,\n            self.email,\n            self.password,\n            self.conf_password,\n            self.first_name,\n            self.last_name\n        )\n    \n        expected_message = f\"The Email field is not a valid e-mail address.\"\n        try:\n            message_element = self.register_page.get_error_message()\n            message_element_text = message_element.text\n            assert message_element.is_displayed(), f\"Expected message: '{expected_message}' not found on the page.\"\n            assert expected_message == message_element_text\n        except NoSuchElementException:\n>           raise AssertionError('Test Failed! Email must contains domain')\nE           AssertionError: Test Failed! Email must contains domain\n\ntest_cases\\test_001_registration_ddt.py:320: AssertionError"}, "attachments": [{"name": "log", "source": "4406486d-3769-4a28-83e3-62d54829a702-attachment.txt", "type": "text/plain"}], "start": 1702740804640, "stop": 1702740807867, "uuid": "7ab1f707-f1c8-46d4-bd89-828cdb218319", "historyId": "e87795855ddf7a6a28dbc3b90713ad01", "testCaseId": "e87795855ddf7a6a28dbc3b90713ad01", "fullName": "test_cases.test_001_registration_ddt.TestUserRegistration#test_register_user_with_email_without_domain", "labels": [{"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_001_registration_ddt"}, {"name": "subSuite", "value": "TestUserRegistration"}, {"name": "host", "value": "DESKTOP-53FL5C3"}, {"name": "thread", "value": "15436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_001_registration_ddt"}]}